public abstract class Character {
    
    protected  int _HP;
    protected  int _MaxHP;
    protected  int _Str;
    protected  int _Def;
    protected int _Magic;
    protected int _MaxMP;
    protected int _MP;
    protected int _Evasion; 
    protected int _Luck;
    protected int _Accuracy;
    
    protected  double _AttackRating;
    
    protected  String _Name;

    protected  static String _About;
   
    protected int _Level;
    protected int _NextLevelExp;
    protected int _CurrentExp;
   
    protected int _Catch;

//temporary stat holder for specials and stuff 
    protected int _Attack;
    protected int _TmpDef;

    protected int _Grams;
    
    public Character(){
    }
    
    public boolean isAlive(){
	if (_HP <= 0) {
	    return false;
	}
	return true;
    }

    public int getDefense(){
	return _Def;
    }
    
    public int getEvasion(){
	return _Evasion;
    }

    public int getLuck(){
	return _Luck;
    }

    public int getLevel(){
	return _Level;
    }

    public int getMP(){
	return _MP;
    }

//Yay level up system! Does what a normal lvl up system does. Excess EXP is carried over when you lvl up.
    public int lvlUp(){
	if ( _CurrentExp > _NextLevelExp ){
	    _Level += 1;
	    _CurrentExp = _CurrentExp - _NextLevelExp;
	    _NextLevelExp = 100*( _Level*(4/3) );
	    statsUp();
	    System.out.print( "You have leveled up!" );
	}
	return _Level;
    }

//EXP gain every time a monster dies. (In this case smaug) This is put in the YoRPG class when smaug dies
    public int expGain( Monster c ){
	_CurrentExp += c.dropExp();
	System.out.println("You have gained " + c.dropExp() + " EXP!");
	lvlUp();
	return _CurrentExp;
    }
    
//Grams gain every time a monster dies.
        public int gramGain ( Monster c ) {
        _Grams += c.dropGram();
        System.out.println("You have gained " + c.dropGram() + " Grams!");
        System.out.println("You have " + _Grams + "Grams!");
        return _Grams;
    }

    public void lowerGram ( int d ) {
	if (_Grams > d) {
            _Grams -= d;
            System.out.printn("You have " + _Grams + "Grams!");
        }
    }
    
    public boolean fleed(){
	if ( (int) (Math.random()*_Luck + 10) < _Luck ){
	    return true; }
	return false;
    }
//if random int 0 - _Luck + 10 < _luck, escape from battle. else you're stuck.


    public void lowerHP( int d ){
	_HP -= d;
	System.out.println(getName()+" HP: "+_HP);
    }
//subtract health, does not need to return anything, could return current health though


    public boolean hasHit( Character c ){
	if (((int) (Math.random()*_Accuracy)) >= ((int) (Math.random()*c.getEvasion()))){
	    return true; }
	return false;
    }
//Choses a random int from 0 to _accuracy of attacker, 
//and checks if that is greater than a random int from 0 to _evasion of the defender. 
//If it is > the attack will go through. (see attack method)


    public void attack( Character c ){
	if ( hasHit( c ) ) {
	    int damage = (int) ((_Attack*_AttackRating) - _TmpDef);
	    if ( damage < 0 ){
		damage = 0;
	    }
	    c.lowerHP( damage ); 
	    System.out.println(c.getName()+" took "+damage+" damage.");  }
//prints the amount of damage the opposing side takes, so there is no need for this in the driver class. 
//Same for the bottom line, except the character has missed their attack and no damage is dealt. 
	else {
	    System.out.println(getName()+" has missed!");	}
    }



    public abstract String getName();
    //get name of char if it has

    public abstract void statsUp();
    //increase stats according to char when level up.


    public void specialize() {
        _Attack = _Str + 5;
        _TmpDef = _Def*(3/4);
    }
           
    public void normalize() {
        _Attack = _Str + 5;
        _TmpDef = _Def;
    }

//for Magic attacks
//if player has enough mp, do a magic attack. else nothing happens
    public void magicalize(){
	if ( _MP >= 5 ){
	    _Attack = _Magic;
	    _MP -= 5;
	    _TmpDef = _Def;
	}
	else {
            _Attack = 0;
	    _TmpDef = _Def;
            System.out.println("Not enough MP. :c");
	}
    }    

    public String tellAbout() {
	return _About;
    }

}
